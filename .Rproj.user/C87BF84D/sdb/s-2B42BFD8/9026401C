{
    "collab_server" : "",
    "contents" : "##################################################################\n##                        Eli Strauss                           ##\n##                Rank change modeling non-SNA                  ##\n##                    January 2nd, 2017                         ##\n##################################################################\n\nlibrary(dplyr)\nlibrary(sna)\nlibrary(network)\noptions(stringsAsFactors = FALSE)\n\nsource(\"~/Documents/Research/RCIISI/IdentifyRankChanges.R\")\nsource(\"~/Documents/Fisibase/ReadTidyAggs.R\")\nrank.changes.full <- rank.changes\nranks <- ranks[ranks$Year != 1988,]\n\n\n##########################Add Kin################################\nrank.changes$upKin <- NA\nrank.changes$downKin <- NA\nfor(clan in unique(ranks$Clan)){\n  clanRanks <- filter(ranks, Clan == clan)\n  for(year in unique(clanRanks$Year)){\n    curRanks <- clanRanks[clanRanks$Year == year,]\n    for(id in curRanks$ID){\n      mom <- filter(tblHyenas, ID == id)$Mom\n      sibs <- filter(tblHyenas, Mom == mom)$ID\n      offspring <- filter(tblHyenas, Mom == id)$ID\n      l <- curRanks[curRanks$ID %in% c(mom,sibs,offspring), 'ID']\n      if(length(rank.changes[rank.changes$Year == year & rank.changes$Upmover == id,]$upKin)){\n        rank.changes[rank.changes$Year == year & rank.changes$Upmover == id,]$upKin <- length(l)-1\n      }\n      if(length(rank.changes[rank.changes$Year == year & rank.changes$Downmover == id,]$downKin)){\n        rank.changes[rank.changes$Year == year & rank.changes$Downmover == id,]$downKin <- length(l)-1\n      }\n    }\n  }\n}\n################################################################\n\n\n\n#######################Add coals###############################  \nrank.changes$upCoal <- NA\nrank.changes$downCoal <- NA\nrank.changes$upNumCoal <- NA\nrank.changes$downNumCoal <- NA\nrank.changes$finalRank <- NA\nrank.changes$initRank <- NA\nfor(clan in unique(ranks$Clan)){\n  clanRanks <- filter(ranks, Clan == clan)\n  for(year in unique(clanRanks$Year)){\n    curRanks <- clanRanks[clanRanks$Year == year,]\n    fullCoals <- filter(aggsFull, Agg %in% curRanks$ID & Seq >= 1, as.numeric(Year) == year)\n    upmovers <- unique(rank.changes[rank.changes$Year == year & rank.changes$Clan == clan,'Upmover'])\n    downmovers <- unique(rank.changes[rank.changes$Year == year & rank.changes$Clan == clan,'Downmover'])\n    if(length(c(upmovers,downmovers)) == 0){next}\n    for(focal in upmovers){\n      curCoals <- filter(fullCoals, Agg == focal)\n      rank.changes[rank.changes$Upmover == focal & rank.changes$Year == year,'finalRank'] <- curRanks[curRanks$ID == focal,'Rank']\n      rank.changes[rank.changes$Upmover == focal & rank.changes$Year == year,'upNumCoal'] <- length(curCoals[,1])\n      if(length(curCoals[,1]) == 0){\n        rank.changes[rank.changes$Upmover == focal & rank.changes$Year == year,'upCoal'] <- 0\n        next\n      }\n      mates <- c()\n      for(i in 1:length(curCoals[,1])){\n        mates <- c(mates, strsplit(curCoals[i,'Group'], split = ',')[[1]][-1])\n      }\n      mates <- unique(mates)\n      rank.changes[rank.changes$Upmover == focal & rank.changes$Year == year,'upCoal'] <- length(mates)-1\n    }\n    \n    for(focal in downmovers){\n      curCoals <- filter(fullCoals, Agg == focal)\n      rank.changes[rank.changes$Downmover == focal & rank.changes$Year == year,'initRank'] <- curRanks[curRanks$IDold == focal,'Rank']\n      rank.changes[rank.changes$Downmover == focal & rank.changes$Year == year,'downNumCoal'] <- length(curCoals[,1])\n      if(length(curCoals[,1]) == 0){\n        rank.changes[rank.changes$Downmover == focal & rank.changes$Year == year,'downCoal'] <- 0\n        next\n      }\n      mates <- c()\n      for(i in 1:length(curCoals[,1])){\n        mates <- c(mates, strsplit(curCoals[i,'Group'], split = ',')[[1]][-1])\n      }\n      mates <- unique(mates)\n      rank.changes[rank.changes$Downmover == focal & rank.changes$Year == year,'downCoal'] <- length(mates)-1\n    }\n  }\n}\n################################################################\n\n\n\n\n\n######################Remove littermates#########################\nremove <- c()\nfor(row in 1:length(rank.changes[,1])){\n  up <- rank.changes[row,'Upmover']\n  down <- rank.changes[row,'Downmover']\n  ub <- filter(tblHyenas, ID == up)$Birthdate\n  db <- filter(tblHyenas, ID == down)$Birthdate\n  if(length(ub) & length(db) && ub == db && ub != '1/1/1900'){\n    remove <- c(remove, row)\n  }\n}\nrank.changes <- rank.changes[-remove,]\n################################################################\n\n\n\n#######################Presence of young########################\nrank.changes$upNumKids <- NA\nrank.changes$upNumMales <- NA\nrank.changes$upNumFemales <- NA\nrank.changes$downNumKids <- NA\nrank.changes$downNumMales <- NA\nrank.changes$downNumFemales <- NA\nrank.changes$upDaughters <- NA\nrank.changes$upSexRatio <- NA\nrank.changes$downSexRatio <- NA\nfor(row in 1:length(rank.changes[,1])){\n  kids <- filter(tblHyenas, Mom == rank.changes[row,'Upmover'], format(Birthdate, '%Y') == rank.changes[row,'Year'] | format(Birthdate, '%Y') == rank.changes[row,'Year']-1)\n  kids <- filter(kids, is.na(Disappeared) | format(Disappeared, '%Y') < rank.changes[row,'Year'])\n  rank.changes[row,'upDaughters'] <- length(filter(tblHyenas, Mom == rank.changes[row,'Upmover'], \n                                            format(Birthdate, '%Y') <= rank.changes[row,'Year'] & Sex == 'f',\n                                            (is.na(Disappeared) | format(Disappeared, '%Y') < rank.changes[row,'Year']))[,1])\n  rank.changes[row,'upSexRatio'] <- length(filter(tblHyenas, Mom == rank.changes[row,'Upmover'], \n                                          format(Birthdate, '%Y') <= rank.changes[row,'Year'] & Sex == 'f')[,1])/length(filter(tblHyenas, \n                                                                                                                        Mom == rank.changes[row,'Upmover'], \n                                                                                                                        format(Birthdate, '%Y') <= rank.changes[row,'Year'],\n                                                                                                                        Sex == 'f' | Sex == 'm')[,1])\n  rank.changes[row,'upNumKids'] <- length(kids[,1])\n  rank.changes[row,'upNumMales'] <- length(filter(kids, Sex == 'm')[,1])\n  rank.changes[row,'upNumFemales'] <- length(filter(kids, Sex == 'f')[,1])\n  \n  kids <- filter(tblHyenas, Mom == rank.changes[row,'Downmover'], format(Birthdate, '%Y') == rank.changes[row,'Year'] | format(Birthdate, '%Y') == rank.changes[row,'Year']-1)\n  kids <- filter(kids, is.na(Disappeared) | format(Disappeared, '%Y') < rank.changes[row,'Year'])\n  rank.changes[row,'downDaughters'] <- length(filter(tblHyenas, Mom == rank.changes[row,'Downmover'], \n                                              format(Birthdate, '%Y') <= rank.changes[row,'Year'] & Sex == 'f',\n                                              (is.na(Disappeared) | format(Disappeared, '%Y') < rank.changes[row,'Year']))[,1])\n  rank.changes[row,'downSexRatio'] <- length(filter(tblHyenas, Mom == rank.changes[row,'Downmover'], \n                                                    format(Birthdate, '%Y') <= rank.changes[row,'Year'] & Sex == 'f')[,1])/length(filter(tblHyenas, \n                                                                                                                                        Mom == rank.changes[row,'Downmover'], \n                                                                                                                                        format(Birthdate, '%Y') <= rank.changes[row,'Year'],\n                                                                                                                                        Sex == 'f' | Sex == 'm')[,1])\n  rank.changes[row,'downNumKids'] <- length(kids[,1])\n  rank.changes[row,'downNumMales'] <- length(filter(kids, Sex == 'm')[,1])\n  rank.changes[row,'downNumFemales'] <- length(filter(kids, Sex == 'f')[,1])\n}\n################################################################\n\n\n########################Aggression intensity####################\nrank.changes$upIntensity <- NA\nrank.changes$downIntensity <- NA\nfor(row in 1:length(rank.changes[,1])){\n  rank.changes[row,'upIntensity'] <- mean(as.numeric(filter(aggsFull, Agg == rank.changes[row,'Upmover'])$ThreatLevel), na.rm = T)\n  rank.changes[row,'downIntensity'] <- mean(as.numeric(filter(aggsFull, Agg == rank.changes[row,'Downmover'])$ThreatLevel), na.rm = T)\n  \n}\n################################################################\n\n\n\n###################Emit/Receive Up hierarchy agg################\nrank.changes$upEmit <- NA\nrank.changes$downEmit <- NA\nrank.changes$upRec <- NA\nrank.changes$downRec <- NA\nrank.changes$upUnprov <- NA\nrank.changes$downUnprov <- NA\nrank.changes$revCoal <- NA\nfor(row in 1:length(rank.changes[,1])){\n  upmover <- rank.changes[row,'Upmover']\n  downmover <- rank.changes[row,'Downmover']\n  \n  upmoverAggsRec <- filter(aggsFull, Recip == upmover, as.numeric(Year) >= min(ranks[ranks$ID == upmover,'Year']))\n  upmoverUpAggsRec <- filter(upmoverAggsRec, AggRank > RecipRank)\n  if(length(upmoverUpAggsRec[,1] == 0)){\n    rank.changes[row,'upRec'] <- 0\n  }else{\n    rank.changes[row,'upRec'] <- 1\n  }\n  \n  upmoverAggsEmit <- filter(aggsFull, Agg == upmover, as.numeric(Year) >= min(ranks[ranks$ID == upmover,'Year']))\n  rank.changes[row,'upUnprov'] <- length(filter(upmoverAggsEmit, Context %in% c('unprov', 'unprovoked'))[,1])/length(upmoverAggsEmit[,1])\n  upmoverUpAggsEmit <- filter(upmoverAggsEmit, AggRank > RecipRank)\n  if(length(upmoverUpAggsEmit[,1] == 0)){\n    rank.changes[row,'upEmit'] <- 0\n  }else{\n    rank.changes[row,'upEmit'] <- 1\n  }\n  \n  downmoverAggsRec <- filter(aggsFull, Recip == downmover, as.numeric(Year) >= min(ranks[ranks$ID == downmover,'Year']))\n  downmoverUpAggsRec <- filter(downmoverAggsRec, AggRank > RecipRank)\n  if(length(downmoverUpAggsRec[,1] == 0)){\n    rank.changes[row,'downRec'] <- 0\n  }else{\n    rank.changes[row,'downRec'] <- 1\n  }\n  rank.changes[row,'revCoal'] <- ifelse(length(filter(aggsFull, Recip == downmover, Agg == upmover, Seq > 0, Year == rank.changes[row,'Year'])[,1]),\n                                        1,0)\n    \n  downmoverAggsEmit <- filter(aggsFull, Agg == downmover, as.numeric(Year) >= min(ranks[ranks$ID == downmover,'Year']))\n  rank.changes[row,'downUnprov'] <- length(filter(downmoverAggsEmit, Context %in% c('unprov', 'unprovoked'))[,1])/length(downmoverAggsEmit[,1])\n  downmoverUpAggsEmit <- filter(downmoverAggsEmit, AggRank > RecipRank)\n  if(length(downmoverUpAggsEmit[,1] == 0)){\n    rank.changes[row,'downEmit'] <- 0\n  }else{\n    rank.changes[row,'downEmit'] <- 1\n  }\n}\n################################################################\nboxplot(rank.changes$finalRank ~ rank.changes$revCoal)\n\n\n\n###############Collapese data for comparison####################\nrc.collapse <- data.frame()\nfor(year in unique(rank.changes$Year)){\n  rcYear <- filter(rank.changes, Year == year)\n  for(clan in unique(rcYear$Clan)){\n    curRC <- filter(rcYear, Clan == clan)\n    for(upmover in unique(curRC$Upmover)){\n      temp <- curRC[curRC$Upmover == upmover,]\n      attach(temp, warn.conflicts = FALSE)\n      downKinAverage <- round(mean(downKin, na.rm = TRUE), digits = 2)\n      downCoalAverage <- round(mean(downCoal, na.rm = TRUE), digits = 2)\n      downNumCoalAverage <- round(mean(downNumCoal, na.rm = TRUE), digits = 2)\n      downNumKidsAverage <- round(mean(downNumKids, na.rm = TRUE), digits = 2)\n      downNumMalesAverage <- round(mean(downNumMales, na.rm = TRUE), digits = 2)\n      downNumFemalesAverage <- round(mean(downNumFemales, na.rm = TRUE), digits = 2)\n      downIntensityAverage <- round(mean(downIntensity, na.rm = TRUE), digits = 2)\n     \n      rand <- sample(length(Downmover),1)\n      downKinRandom <- downKin[rand]\n      downCoalRandom <- downCoal[rand]\n      downNumCoalRandom <- downNumCoal[rand]\n      \n      rc.collapse <- rbind(rc.collapse, cbind(Year, Upmover, finalRank, Clan, upKin, upCoal, upNumCoal,\n                                              upNumKids, upNumMales, upNumFemales, upIntensity,downIntensityAverage,\n                                              downKinAverage, downCoalAverage, downNumCoalAverage,upUnprov, downUnprov,\n                                              upDaughters, upSexRatio, downDaughters, downSexRatio,\n                                              downKinRandom, downCoalRandom, downNumCoalRandom, upEmit, upRec, downEmit, downRec,\n                                              downNumKidsAverage, downNumMalesAverage, downNumFemalesAverage))\n      detach(temp)\n    }\n  }\n}\nrc.collapse[,c(-2,-4)] <- sapply(rc.collapse[,c(-2,-4)], as.numeric)\nrc.collapse <- unique(rc.collapse)\n\n################################################################\n\n\n\n\n#######################Explore data#############################\n\nhist(rc.collapse$upCoal - rc.collapse$downCoalAverage)\nwith(filter(rc.collapse, finalRank >= 5), hist(upCoal-downCoalAverage))\n\nhist(rc.collapse$upNumCoal - rc.collapse$downNumCoalAverage)\nwith(filter(rc.collapse, finalRank <= 5), hist(upNumFemales - downNumFemalesAverage))\n\nhist(rc.collapse$upNumKids - rc.collapse$downNumKidsAverage)\nhist(rc.collapse$upNumFemales - rc.collapse$downNumFemalesAverage)\n\nhist(rc.collapse$upIntensity - rc.collapse$downIntensityAverage)\n################################################################\n\n\n\n#########################Model things###########################\nrc.dat.up <- data.frame()\nrc.dat.down <- data.frame()\nfor(row in 1:length(rank.changes[,1])){\n  rc.dat.up <- rbind(rc.dat.up, cbind(rank.changes[row,c(\"Year\", 'Upmover', 'Clan', 'upKin', 'upIntensity', 'upUnprov', 'upCoal', 'upNumCoal', 'finalRank', 'upNumKids', 'upNumMales', 'upNumFemales', 'upEmit', 'upRec', 'upDaughters', 'upSexRatio')],1))\n  rc.dat.down <- rbind(rc.dat.down, cbind(rank.changes[row,c('Year', 'Downmover', 'Clan', 'downKin', 'downIntensity', 'downUnprov', 'downCoal', 'downNumCoal', 'initRank', 'downNumKids', 'downNumMales', 'downNumFemales', 'downEmit', 'downRec', 'downDaughters', 'downSexRatio')],0))\n}\n\nnames(rc.dat.up) <- c('Year', 'ID', 'Clan', 'Kin', 'Intensity', 'Unprov', 'CoalPartners', 'NumCoal', 'Rank', 'NumKids', 'NumMales', 'NumFemales', 'Emit', 'Rec', 'Daughters', 'SexRatio', 'upDown')\nnames(rc.dat.down) <- c('Year', 'ID', 'Clan', 'Kin', 'Intensity', 'Unprov', 'CoalPartners', 'NumCoal', 'Rank', 'NumKids', 'NumMales', 'NumFemales', 'Emit','Rec', 'Daughters', 'SexRatio', 'upDown')\nrc.dat <- rbind(rc.dat.up, rc.dat.down)\nrc.dat <- unique(rc.dat)\n\nlibrary(lme4)\nsummary(glmer(data = filter(rc.dat, Rank <= 5), formula = upDown ~ CoalPartners + (1|Year) ,family = binomial))\nsummary(glm(dat = rc.dat, formula = upDown ~ Unprov +Unprov:Rank, family = binomial))\n################################################################\n\n\n#########################behavior rates#########################\n\n################################################################\n\n\n##################################Testosterone#########################\nttt <- read.csv(\"~/Documents/Fisibase/testosterone.csv\")\nttt$hyenaID <- tolower(ttt$hyenaID)\nttt$poop_date <- as.Date(ttt$poop_date, format = '%d-%b-%y')\nttt$poop_year <- as.numeric(format(ttt$poop_date, '%Y'))\nttt$am.pm <- as.factor(ttt$am.pm)\nttt$ng.g <- as.numeric(ttt$ng.g)\nttt[ttt$poop_time == '','am.pm'] <- NA\n\nttt.am <- filter(ttt, am.pm == 'AM')\nttt.am.mean <- aggregate(ng.g ~ poop_year + hyenaID, data = ttt.am, mean)\n\nrc.dat$fecalT <- left_join(x = rc.dat, y = ttt.am.mean, by = c(\"Year\" = \"poop_year\", \"ID\" = \"hyenaID\"))$ng.g\nboxplot(rc.dat$fecalT ~ rc.dat$upDown)\n#######################################################################\n\n\n\n########################By year#################################\nyearly <- data.frame()\nfor(clan in unique(ranks[,'Clan'])){\n  for(year in unique(ranks[ranks$Clan == clan,'Year'])){\n    curRanks <- ranks[ranks$Clan == clan & ranks$Year == year,]\n    alpha <- curRanks[curRanks$Rank == 1, 'IDold']\n    attackOnAlpha <- length(filter(aggsWinner, Recip == alpha, Year == year)[,1])\n    alphaDaughters <- length(filter(tblHyenas, Mom == alpha, ID %in% curRanks$ID)[,1])\n    alphaIntensity <- mean(as.numeric(filter(aggsFull, Agg == alpha, Year == year)$ThreatLevel), na.rm = T)/mean(as.numeric(filter(aggsFull, Agg == alpha, Year != year)$ThreatLevel), na.rm = T)\n    clanSize <- length(curRanks[,1])\n    rankChanges <- length(rc.dat[rc.dat$Year == year & rc.dat$Clan == clan,1])\n    movers <- min(length(rc.dat[rc.dat$Year == year & rc.dat$Clan == clan & rc.dat$upDown == 1, 1]), length(rc.dat[rc.dat$Year == year & rc.dat$Clan == clan & rc.dat$upDown == 0, 1]))\n    yearly <- rbind(yearly, cbind(clan, year, alpha, attackOnAlpha, alphaDaughters, alphaIntensity, clanSize, rankChanges, movers))\n  }\n}\nyearly[,c(-1,-3)] <- sapply(yearly[,c(-1,-3)], as.numeric)\n\ntalekDeath <- as.numeric(c(format(filter(tblHyenas, ID == 'bsh')$Disappeared, '%Y'),\n                          format(filter(tblHyenas, ID == 'mrph')$Disappeared, '%Y'),\n                          format(filter(tblHyenas, ID == 'dion')$Disappeared, '%Y')))\n\nyearly$alphaDeath <- NA\nfor(y in yearly[yearly$clan == 'talek',]$year){\n  ans <- y - talekDeath\n  if(length(ans[ans >= 0])){yearly[yearly$year == y & yearly$clan == 'talek', 'alphaDeath'] <- min(ans[ans >= 0])}\n}\n\nyearly$FitChange <- 0\nfor(clan in unique(ranks$Clan)){\n  for(year in unique(ranks[ranks$Clan == clan,'Year'])){\n    curRanks <- filter(ranks, Clan == clan, Year == year)\n    curRanks[is.na(curRanks$Diff), 'Diff'] <- 0\n    yearly[yearly$clan == clan & yearly$year == year,'FitChange'] <- mean(abs(curRanks$Diff))\n  }\n}\n\n\n \n################################################################\nsummary(glm(data = yearly[yearly$clan == 'talek',], as.numeric(rankChanges) ~ as.numeric(alphaDaughters), family = poisson))\nsummary(glm(data = yearly, FitChange ~ alphaIntensity, family= beta))\n",
    "created" : 1484240270394.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "484087676",
    "id" : "9026401C",
    "lastKnownWriteTime" : 1484240408,
    "last_content_update" : 1484240408778,
    "path" : "~/Documents/Research/socialmob/RankChangeUpDownComparison.R",
    "project_path" : "RankChangeUpDownComparison.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}